<program> ::= "start" <space> <menu_declaration> (<menu_declaration>)*

<space> 			::= " "

<menu_declaration> 	::= "menu" <space> <identifier> <space>? <start_brace> <menu_body> <end_brace>

<identifier> 		::= <letter> (<letter> | <digit> | "_")*

<letter>          	::= ([a-z] | [A-Z])+

<digit>           	::= [0-9]+

<start_brace> 		::= "{"

<end_brace>			::= "}"

<menu_body> 		::= (<statement_list> "\n")+ ("end" ";")?

<statement_list> 		::= <display_statment> | <option_statement> | <action_statement> | <if_statement> | <input_statement>

<display_statment> 	::= "display" <space> <string_literal> ";"

<option_statement> 	::= "option" <space> <option_target> <space> <string_literal> (<goto_symbol_stmt> | <goto_stmt> | <action_statement>)? ";"

<option_target> 	::= <digit> | <regex_literal> | <string_literal>

/* string_literal is a call to js function */
<action_statement>		::= <space>? "action" <space> <quoted_identifier> (<space> "with" <space> "{" (<identifier> ":" <identifier> ",")* "}" )? (<space> "as" <space> <identifier>)?

<input_statement> 	::= "input" <space> <identifier> ";"

<goto_symbol_stmt>	::= "->" <space> (<identifier> | <navigate_stmt>)

<goto_stmt>			::= "goto" <space> (<identifier> | <navigate_stmt>)

<navigate_stmt>		::= "end" | "back"

<if_statement> ::= "if" "(" <condition> ")" "{" <statement_list> "}" ("else" "{" <statement_list> "}" )?

<for_each_statement>  ::= "for" <space> "each" "(" <identifier> ("," <space> <identifier> )? <space> "in" <space> <identifier> ")"
                            "{" <statement_list> "}"

<condition>    ::= <expression>

/* Re-use existing rules for: */
/* <expression>          ::= <identifier> <comparison_operator> <literal> | <identifier> <comparison_operator> <identifier>*/

<expression>    ::= <literal> | <unary> | <binary>  | <grouping>

<literal>       ::= <digit> | <string_literal> | "true" | "false" | "nil"

<grouping>      ::= "(" <expression> ")"

<unary>         ::= ( "-" | "!" ) <expression>

<binary>		::= <expression> <operator> <expression>

<operator>      ::= "==" | "!=" | "<" | "<=" | ">" | ">=" | "+"  | "-"  | "*" | "/"

/* <comparison_operator> ::= "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "!" */
/* <literal>             ::= <string_literal> | <number_literal> | "true" | "false" */


<number_literal>      ::= "-"? (<digit>)+  ( "." <digit> )?

<quoted_identifier> 	::= "\"" <identifier> "\"" | "'" <identifier> "'"

<string_literal>    ::= <double_quoted_string> | <single_quoted_string>

<double_quoted_string> ::= "\"" ( "\\\"" | <escape_sequences> | <variable_interpolation> | <digit> | <letter> )* "\""

/* newline, tab, \\ */
<escape_sequences> 		::= "\\n" | "\t" | "\\\\"

<single_quoted_string> 	::= "'" ( "\\'" | <escape_sequences> | <variable_interpolation> | <digit> | <letter> )* "'"

<variable_interpolation> ::= "{{" <identifier> "}}"


/* Regular expression statement. Pattern is incomplete. Will be handled by the base lang*/
<regex_literal> ::= "/" ([a-z]* [A-Z]*) "/" ( <letter> )*
